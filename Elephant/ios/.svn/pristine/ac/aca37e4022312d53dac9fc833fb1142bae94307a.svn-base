//
//  BlueToothHelper.m
//  BodyScale
//
//  Created by August on 14-10-12.
//  Copyright (c) 2014年 August. All rights reserved.
//

#import "BlueToothHelper.h"

NSString *const selectUserSuccessAck = @"<080501a501>";
NSString *const instanceMesureDataPrefix = @"<080701b001";
NSString *const selectUserMesureCompletePrefix = @"<081101b1";
NSString *const mesureCompleteExtraDataPrefix = @"<081201b1";


@interface BlueToothHelper ()

@end

@implementation BlueToothHelper

#pragma mark - init methods

-(instancetype)init
{
    self = [super init];
    if (self) {
        _centralManager = [[CBCentralManager alloc] initWithDelegate:self queue:dispatch_get_main_queue()];
        _peripherals = [NSMutableArray array];
    }
    return self;
}

+(instancetype)shareInstance
{
    static BlueToothHelper *blueToothHelper = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        blueToothHelper = [[BlueToothHelper alloc] init];
    });
    return blueToothHelper;
}

#pragma mark - private methdos

-(void)setNotifyOnForPeripheral:(CBPeripheral *)peripheral
{
    CBService *service = [self findServiceInPeripheral:peripheral];
    
    if (service) {
        CBCharacteristic *characteristic = [self findCharacteristicWithUUID:NotifyCharactarID OnService:service];
        if (characteristic) {
            [peripheral setNotifyValue:YES forCharacteristic:characteristic];
        }
    }
    
}

-(CBService *)findServiceInPeripheral:(CBPeripheral *)peripheral
{
    for (CBService *service in peripheral.services) {
        if ([service.UUID.UUIDString isEqual:ServiceID]) {
            return service;
        }
    }
    
    return nil;
}

-(CBCharacteristic *)findCharacteristicWithUUID:(NSString *)UUID OnService:(CBService *)service
{
    for (CBCharacteristic *c in service.characteristics) {
        if ([c.UUID.UUIDString isEqualToString:UUID]) {
            return c;
        }
    }
    return nil;
}

#pragma mark - public methods

-(void)centralManagerChangedStateBlock:(void (^)(CBCentralManagerState))block
{
    _centerChangedStateBlock = block;
}

-(void)centralManagerScanPeripheralsWithBlock:(void (^)(NSArray *))block
{
    [self centralManagerScanPeripheralsWithSeviceUUIDS:nil completeBlock:block];
}

-(void)centralManagerScanPeripheralsWithSeviceUUIDS:(NSArray *)serviceUUIDs completeBlock:(void (^)(NSArray *))block
{
    [self.centralManager scanForPeripheralsWithServices:serviceUUIDs
                                                options:@{CBCentralManagerScanOptionAllowDuplicatesKey:@YES}];
    
    
    _scanPeripheralsBlock = block;
}

-(void)centralManagerConnectToPeripheral:(CBPeripheral *)peripheral completeBlock:(void (^)(CBPeripheral *,NSError *))block
{
    NSAssert(peripheral != nil, @"will connect to a peripheral which should not be nil");
    [self.centralManager connectPeripheral:peripheral options:nil];_connectPeripheralBlock = block;
}

-(void)centralManagerCancelConnectPeripheral:(CBPeripheral *)peripheral comleteBlock:(void (^)(CBPeripheral *,NSError *))block
{
    NSAssert(peripheral != nil, @"will cancel connect a peripheral which should not be nil");
    [self.centralManager cancelPeripheralConnection:peripheral];
    _cancelConnectPeripheralBlock = block;
}

-(void)centralManagerSendData:(NSData *)data
                 ToPeripheral:(CBPeripheral *)peripheral
{
    [self setNotifyOnForPeripheral:peripheral];
    CBService *service = [self findServiceInPeripheral:peripheral];
    if (service != nil) {
        CBCharacteristic *characteristic = [self findCharacteristicWithUUID:WriteCharactarID OnService:service];
        if (characteristic != nil) {
            [peripheral writeValue:data
                 forCharacteristic:characteristic
                              type:CBCharacteristicWriteWithResponse];

        }
    }else{
        NSLog(@"can't find service");
    }
}

-(void)centralManagerDidRecieveDataWithBlock:(void (^)(MeasureActionType, id , CBPeripheral *, NSError *))block
{
    _peripheralResponseBlock = block;
}

#pragma mark - CBCentralManagerDelegate methods
//状态更改
-(void)centralManagerDidUpdateState:(CBCentralManager *)central
{
    _centerChangedStateBlock(central.state);
}

//发现外围
-(void)centralManager:(CBCentralManager *)central didDiscoverPeripheral:(CBPeripheral *)peripheral advertisementData:(NSDictionary *)advertisementData RSSI:(NSNumber *)RSSI
{
    if (![_peripherals containsObject:peripheral] && [peripheral.name.lowercaseString hasPrefix:@"health"]) {
        NSData *manufacture = advertisementData[CBAdvertisementDataManufacturerDataKey];
        NSString *macString = [NSString stringWithFormat:@"%@",manufacture];
        macString = [macString stringByReplacingOccurrencesOfString:@" " withString:@""];
        macString = [macString substringWithRange:NSMakeRange(1, 12)];
        [peripheral setMAC:macString];
        NSLog(@"advertisment data is %@",advertisementData);
        [_peripherals addObject:peripheral];
        peripheral.delegate = self;
        _scanPeripheralsBlock(_peripherals);
    }
}

//连接
-(void)centralManager:(CBCentralManager *)central didConnectPeripheral:(CBPeripheral *)peripheral
{
    _connectedPeripheral = peripheral;
    _connectedPeripheral.delegate = self;
    [_connectedPeripheral discoverServices:@[[CBUUID UUIDWithString:ServiceID]]];
    _connectPeripheralBlock(peripheral,nil);
}

//失去连接
-(void)centralManager:(CBCentralManager *)central didDisconnectPeripheral:(CBPeripheral *)peripheral error:(NSError *)error
{
    if (_cancelConnectPeripheralBlock) {
        _cancelConnectPeripheralBlock(peripheral,error);   
    }
}

//连接失败
-(void)centralManager:(CBCentralManager *)central didFailToConnectPeripheral:(CBPeripheral *)peripheral error:(NSError *)error
{
    _connectPeripheralBlock(peripheral,error);
}

-(void)centralManager:(CBCentralManager *)central willRestoreState:(NSDictionary *)dict
{

}

-(void)centralManager:(CBCentralManager *)central didRetrievePeripherals:(NSArray *)peripherals
{

}

-(void)centralManager:(CBCentralManager *)central didRetrieveConnectedPeripherals:(NSArray *)peripherals
{

}

#pragma mark - CBPeripheralDelegate methdos

-(void)peripheralDidUpdateName:(CBPeripheral *)peripheral
{

}

-(void)peripheral:(CBPeripheral *)peripheral didDiscoverServices:(NSError *)error
{
    if (peripheral.services.count > 0) {
        [peripheral discoverCharacteristics:@[[CBUUID UUIDWithString:WriteCharactarID],[CBUUID UUIDWithString:NotifyCharactarID]] forService:peripheral.services[0]];
        NSLog(@"%s %@",__PRETTY_FUNCTION__,peripheral.services);
    }
}

-(void)peripheral:(CBPeripheral *)peripheral didWriteValueForDescriptor:(CBDescriptor *)descriptor error:(NSError *)error
{

}

-(void)peripheral:(CBPeripheral *)peripheral didUpdateValueForDescriptor:(CBDescriptor *)descriptor error:(NSError *)error
{

}

-(void)peripheral:(CBPeripheral *)peripheral didWriteValueForCharacteristic:(CBCharacteristic *)characteristic error:(NSError *)error
{

}

-(void)peripheral:(CBPeripheral *)peripheral didUpdateValueForCharacteristic:(CBCharacteristic *)characteristic error:(NSError *)error
{
    NSString *str = [NSString stringWithFormat:@"%@",characteristic.value];
    str = [str stringByReplacingOccurrencesOfString:@" " withString:@""];
    NSLog(@"str is %@",str);
    if ([str isEqualToString:selectUserSuccessAck]) {
        _peripheralResponseBlock(selectUserMesureAck,nil,peripheral,error);

    }else if ([str hasPrefix:instanceMesureDataPrefix]){
        str = [str substringWithRange:NSMakeRange(str.length-5, 4)];
        unsigned long result = strtoul([str UTF8String], 0, 16);
        _peripheralResponseBlock(InstanceWeight,@(result/20),peripheral,error);

    }else if ([str hasPrefix:selectUserMesureCompletePrefix]){
        NSString *waterStr = [str substringWithRange:NSMakeRange(str.length-5, 4)];
        unsigned long water = strtoul([waterStr UTF8String], 0, 16);

        NSString *fatStr = [str substringWithRange:NSMakeRange(str.length-9, 4)];
        unsigned long fat = strtoul([fatStr UTF8String], 0, 16);

        NSString *weightStr = [str substringWithRange:NSMakeRange(str.length-13, 4)];
        unsigned long weight = strtoul([weightStr UTF8String], 0, 16);

        
        _peripheralResponseBlock(selectUserMesureComplpete,@{@"water":@(water/10.0),
                                                             @"bodyFat":@(fat/10.0),
                                                             @"weight":@(weight/200.0)},peripheral,error);
        
        //test
        NSString *dataStr = [NSString stringWithFormat:@"090501b1010109%@",[str substringWithRange:NSMakeRange(str.length - 21, 20)]];
        NSData *cmdData = hexToBytes(dataStr);
        
        [self centralManagerSendData:cmdData ToPeripheral:self.connectedPeripheral];
    }else if ([str hasPrefix:mesureCompleteExtraDataPrefix]){
        NSString *AMRStr = [str substringWithRange:NSMakeRange(str.length-5, 4)];
        unsigned long AMR = strtoul([AMRStr UTF8String], 0, 16);
        
        NSString *bodyAgeStr = [str substringWithRange:NSMakeRange(str.length-7, 2)];
        unsigned long bodyAge = strtoul([bodyAgeStr UTF8String], 0, 16);

        NSString *inFatStr = [str substringWithRange:NSMakeRange(str.length-9, 2)];
        unsigned long inFat = strtoul([inFatStr UTF8String], 0, 16);
        
        NSString *SFatStr = [str substringWithRange:NSMakeRange(str.length-13, 4)];
        unsigned long SFat = strtoul([SFatStr UTF8String], 0, 16);

        NSString *BMRStr = [str substringWithRange:NSMakeRange(str.length-17, 4)];
        unsigned long BMR = strtoul([BMRStr UTF8String], 0, 16);

        NSString *BoneStr = [str substringWithRange:NSMakeRange(str.length-19, 2)];
        unsigned long bone = strtoul([BoneStr UTF8String], 0, 16);

        NSString *muscleStr = [str substringWithRange:NSMakeRange(str.length-23, 4)];
        unsigned long muscle = strtoul([muscleStr UTF8String], 0, 16);

        _peripheralResponseBlock(selectUserMesureComplpeteExtra,@{@"AMR":@(AMR),
                                                                  @"bodyAge":@(bodyAge),
                                                                  @"inFat":@(inFat),
                                                                  @"sFat":@(SFat),
                                                                  @"BMR":@(BMR),
                                                                  @"bone":@(bone/10),
                                                                  @"muscle":@(muscle/10)},peripheral,error);

        //test
        NSString *dataStr = [NSString stringWithFormat:@"090501b1020209%@",[str substringWithRange:NSMakeRange(str.length - 23, 20)]];
        NSLog(@"dataStrinf is sss %@",dataStr);
        NSData *cmdData = hexToBytes(dataStr);
        
        [self centralManagerSendData:cmdData ToPeripheral:self.connectedPeripheral];
    }
    
}

-(void)peripheral:(CBPeripheral *)peripheral didDiscoverCharacteristicsForService:(CBService *)service error:(NSError *)error
{

}

-(void)peripheral:(CBPeripheral *)peripheral didDiscoverIncludedServicesForService:(CBService *)service error:(NSError *)error
{

}

-(void)peripheral:(CBPeripheral *)peripheral didDiscoverDescriptorsForCharacteristic:(CBCharacteristic *)characteristic error:(NSError *)error
{

}

-(void)peripheral:(CBPeripheral *)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic *)characteristic error:(NSError *)error
{
    NSLog(@"update notify data is %@ error is %@",characteristic.value,error);
}

@end
