//
//  BTInterfaceService.m
//  BodyScaleProduction
//
//  Created by Go Salo on 14-4-2.
//  Copyright (c) 2014年 Go Salo. All rights reserved.
//

#import "BTInterfaceService.h"
#import "ScaleBllEncoder.h"
#import "ScaleUserEntity.h"
#import "ScaleUserDataEntity.h"
#import "ScaleRealTimeWeightEntity.h"
#import "BTUtils.h"
#import "BTService.h"
#import "oad.h"

#define TI_KEYFOB_KEYS_SERVICE_UUID                     @"ffe0"
#define TI_KEYFOB_KEYS_NOTIFICATION_UUID                @"ffe1"
#define TI_KEYFOB_KEYS_WRITE_UUID                       @"ffe3"

#define TI_KEYFOB_KEYS_OAD_CHARACTERISTIC_WRITE_A_UUID  @"f000ffc1-0451-4000-b000-000000000000"
#define TI_KEYFOB_KEYS_OAD_CHARACTERISTIC_WRITE_B_UUID  @"f000ffc2-0451-4000-b000-000000000000"
#define TI_KEYFOB_KEYS_OAD_SERVICE_UUID                 @"f000ffc0-0451-4000-b000-000000000000"

#define BT_SERVICE_SUCCESS_CODE 0
#define BT_SERVICE_FAILURE_CODE 1

#define HI_UINT16(a) (((a) >> 8) & 0xff)
#define LO_UINT16(a) ((a) & 0xff)

@interface BTInterfaceService () <BTServiceDelegate>

@end

@implementation BTInterfaceService {
    DidDiscoverPeripheral _findPeripheralCompletion;
    
    BTResponseCompletion _existUserCompletion;
    BTResponseCompletion _newUserCompletion;
    BTResponseCompletion _deleteUserCompletion;
    BTResponseCompletion _updateUserCompletion;
    BTResponseCompletion _getUserInfoCompletion;
    BTResponseCompletion _getAllUserInfoCompletion;
    BTResponseCompletion _selectScaleCompletion;
    BTResponseCompletion _readScaleDataCompletion;
    BTResponseCompletion _deleteScaleDataCompletion;
    BTResponseCompletion _updateTimeCompletion;
    BTResponseCompletion _scaleSettingCompletion;
    BTResponseCompletion _customtypeCompletion;
    BTResponseCompletion _quitcustomtypeCompletion;
    BTResponseCompletion _readIdCompletion;
    BTResponseCompletion _writeIdCompletion;
    BTResponseCompletion _getMACAddressCompletion;
    BTResponseCompletion _resetWeightCompletion;
    BTResponseCompletion _resetScaleCompletion;
    
    // OAD
    GetOADBinTypeCompletion         _getOADBinTypeCompletion;
    WriteBinFilePackageCompletion   _writeBinFilePackageCompletion;
    WriteBinFileCompletion          _writeBinFileCompletion;
    
    int _nBlocks;
    int _nBytes;
    int _iBlocks;
    int _iBytes;
    
    // 成员对象
    ScaleBllEncoder     *_dataEncorder;         // 编码器
    BTService           *_btService;            // 蓝牙服务
    
    // 数据
    NSMutableArray      *_userDataEntityList;
    
    // Temp
    NSData                              *_lastInfoPackage;
    NSData                              *_lastDataPackage;
    NSData                              *_tempUserData;
    ScaleUserDataEntity                 *_userDataEntityPackage;
    CBPeripheral                        *_actPeripheral;
    NSString *_deviceCode;
    
    Byte                                _version;
    uint16_t                            _imgVer;
}

- (id)init {
    self = [super init];
    if (self) {

    }
    return self;
}

#pragma mark - Getter
- (CBPeripheral *)actPeripheral {
    return _actPeripheral;
}

#pragma mark - Public Method
/* 初始化设备 */
- (void)setup {
    _dataEncorder = [[ScaleBllEncoder alloc] init];
    _btService = [[BTService alloc] initWithDelegate:self];
}

/* 搜索设备 */
- (void)scanPeripheralsDidDiscoverPeripheral:(DidDiscoverPeripheral)discovered {
    NSLog(@"开始搜索");
    
    if (self.actPeripheral) {
        if ([self.actPeripheral isConnected]) {
            [_btService disconnect:self.actPeripheral];
            _actPeripheral = nil;
        }
    }
    
    _findPeripheralCompletion = discovered;
    
    CBUUID *uuid = [CBUUID UUIDWithString:TI_KEYFOB_KEYS_SERVICE_UUID];
    [_btService scanForPeripheralsWithServices:@[uuid] timeout:-1];
}

/* 停止搜索设备 */
- (void)stopScanPeripherals {
    NSLog(@"停止搜索设备");
    _findPeripheralCompletion = nil;
    [_btService stopScan];
}

/* 连接到设备 */
- (void)connectDevice:(CBPeripheral *)peripheral {
    // *************** 初始化全局数据 ********************
    _userEntityList = [NSMutableArray array];
    _userDataEntityList = [NSMutableArray array];
    _lastInfoPackage = nil;
    _lastDataPackage = nil;
    _tempUserData = nil;
    _deviceCode = nil;
    _userDataEntityPackage = nil;
     _findPeripheralCompletion = nil;
    
     _existUserCompletion = nil;
     _newUserCompletion = nil;
     _deleteUserCompletion = nil;
     _updateUserCompletion = nil;
     _getUserInfoCompletion = nil;
     _getAllUserInfoCompletion = nil;
     _selectScaleCompletion = nil;
     _readScaleDataCompletion = nil;
     _deleteScaleDataCompletion = nil;
     _updateTimeCompletion = nil;
     _scaleSettingCompletion = nil;
     _customtypeCompletion = nil;
     _quitcustomtypeCompletion = nil;
     _readIdCompletion = nil;
     _writeIdCompletion = nil;
    // *************** 初始化全局数据 END ********************
    
    if(_actPeripheral) {
        [self disconnect];
    }
    
    _actPeripheral = peripheral;
    [_btService connect:peripheral notifyOptions:nil];
}

/* 与设备断开连接 */
- (void)disconnect {
    if (_actPeripheral) {
        [_btService disconnect:_actPeripheral];
    }
}

/* 更新设备时间 */
- (void)updateTimeCompletion:(BTResponseCompletion)completion {
    _updateTimeCompletion = completion;
    NSData *data = [_dataEncorder dataEncordeUpdateTime];
    [self writeDataToActivePeripheral:data];
}

/* 查看用户是否存在 */
- (void)existUser:(int)locationNo completion:(BTResponseCompletion)completion {
    _existUserCompletion = completion;
    NSData *data = [_dataEncorder dataEncordeExistUser:locationNo];
    [self writeDataToActivePeripheral:data];
}

/* 新建用户 */
- (void)newUser:(int)locationNo height:(int)height age:(int)age gender:(int)gender completion:(BTResponseCompletion)completion {
    _newUserCompletion = completion;
    NSData *data = [_dataEncorder dataEncordeNewUser:locationNo height:height age:age gender:gender];
    [self writeDataToActivePeripheral:data];
}

/* 删除用户 */
- (void)deleteUser:(int)locationNo completion:(BTResponseCompletion)completion {
    _deleteUserCompletion = completion;
    NSData *data = [_dataEncorder dataEncordeDeleteUser:locationNo];
    [self writeDataToActivePeripheral:data];
}

/* 更新用户信息 */
- (void)updateUser:(int)locationNo height:(int)height age:(int)age gender:(int)gender completion:(BTResponseCompletion)completion {
    _updateUserCompletion = completion;
    NSData *data = [_dataEncorder dataEncordeUpdateUser:locationNo height:height age:age gender:gender];
    [self writeDataToActivePeripheral:data];
}

/* 获取当前用户参数 */
- (void)getUserInfo:(int)locationNo completion:(BTResponseCompletion)completion {
    _getUserInfoCompletion = completion;
    NSData *data = [_dataEncorder dataEncordeGetSimUser:locationNo];
    [self writeDataToActivePeripheral:data];
}

/* 获取所有用户信息 */
- (void)getAllUserCompletion:(BTResponseCompletion)completion {
    _getAllUserInfoCompletion = completion;
    _lastInfoPackage = nil;
    NSData *data = [_dataEncorder dataEncordeGetAllUser];
    [self writeDataToActivePeripheral:data];
}

/* 选择用户称量 */
- (void)selectUserScale:(int)locationNo height:(int)height age:(int)age gender:(int)gender completion:(BTResponseCompletion)completion {
    _selectScaleCompletion = completion;
    NSData *data = [_dataEncorder dataEncordeUserScale:locationNo height:height age:age gender:gender];
    [self writeDataToActivePeripheral:data];
}

/* 上传数据 */

/* 读取scale内某用户存储的测量数据 */
- (void)readScaleData:(int)locationNo completion:(BTResponseCompletion)completion {
    _readScaleDataCompletion = completion;
    _lastDataPackage = nil;
    NSData *data = [_dataEncorder dataEncordeReadScaleData:locationNo];
    [self writeDataToActivePeripheral:data];
}

/* 删除scale内某用户存储的测量数据 */
- (void)deleteScaleData:(int)locationNo completion:(BTResponseCompletion)completion {
    _deleteScaleDataCompletion = completion;
    NSData *data = [_dataEncorder dataEncordeDeleteScaleData:locationNo];
    [self writeDataToActivePeripheral:data];
}

/* 实时重量数据传输 */

/* 读取BLE端编号地址 */
- (void)readId:(BTResponseCompletion)completion {
    _readIdCompletion = completion;
    // 读 A1h 5Ah
    short c = 0x5AA1;
    NSData *data = [[NSData alloc]initWithBytes:&c length:sizeof(short)];
    [self writeDataToActivePeripheral:data];
}

/* 写入BLE端编号地址 */
- (void)writeId:(NSString *)stringId writeCompletion:(BTResponseCompletion)completion {
    _writeIdCompletion = completion;
    NSData *idData = [self stringToByte:stringId];
    // 写 A1h A5h
    short c = 0xA5A1;
    NSMutableData *data = [[NSMutableData alloc]initWithBytes:&c length:sizeof(short)];
    [data appendData:idData];
    
    [self writeDataToActivePeripheral:data];
}

/* 读取MAC地址 */
- (void)getMACAddressCompletion:(BTResponseCompletion)completion {
    _getMACAddressCompletion = completion;
    
    // 写 E3 4D 41 43
    int c = 0xE34D4143;
    int sc = CFSwapInt32(c);
    NSMutableData *data = [[NSMutableData alloc]initWithBytes:&sc length:sizeof(sc)];
    
    [self writeDataToActivePeripheral:data];
}

/* 重量找零 */
- (void)resetWeightCompletion:(BTResponseCompletion)completion {
    _resetWeightCompletion = completion;
    
    unsigned char c[] = {0xAA, 0x01, 0xE5};
    NSData *data = [[NSData alloc]initWithBytes:c length:sizeof(Byte) * 3];
    [self writeDataToActivePeripheral:data];
}

/* 重置数据 */
- (void)resetScaleCompletion:(BTResponseCompletion)completion {
    _resetScaleCompletion = completion;
    
    unsigned char c[] = {0xE4, 0x53, 0x45, 0x54};
    NSData *data = [[NSData alloc]initWithBytes:c length:sizeof(Byte) * 4];
    [self writeDataToActivePeripheral:data];
}

/***************************** 暂时没有用到的协议 ************************************
- (void)scaleSetting:(int)weightrange elecrange:(int)elecrange completion:(BTResponseCompletion)completion {
    _scaleSettingCompletion = completion;
    NSData *data = [_dataEncorder dataEncordeScaleSetting:weightrange elecrange:elecrange];
    [self writeDataToActivePeripheral:data];
}

- (void)customtypeCompletion:(BTResponseCompletion)completion {
    _customtypeCompletion = completion;
    NSData *data = [_dataEncorder dataEncordeCustomtype];
    [self writeDataToActivePeripheral:data];
}

- (void)quitcustomtypeCompletion:(BTResponseCompletion)completion {
    _quitcustomtypeCompletion = completion;
    NSData *data = [_dataEncorder dataEncordeQuitcustomtype];
    [self writeDataToActivePeripheral:data];
}
***************************** 暂时没有用到的协议 end **********************************/

// ===================== get info feedback ========================
- (void)getAllUserConfirm:(int)pkgnum pkgid:(int)pkgid {
    NSData *data = [_dataEncorder dataEncordeGetAllUserConfirm:pkgnum pkgid:pkgid];
    [self writeDataToActivePeripheral:data];
}

- (void)getUserScaleConfirm:(int)pkgnum pkgid:(int)pkgid {
    NSData *data = [_dataEncorder dataEncordeGetUserScaleConfirm:pkgnum pkgid:pkgid];
    [self writeDataToActivePeripheral:data];
}

- (void)getReadScaleDataConfirm:(int)pkgnum pkgid:(int)pkgid {
    NSData *data = [_dataEncorder dataEncordeGetReadScaleDataConfirm:pkgnum pkgid:pkgid];
    [self writeDataToActivePeripheral:data];
}
// ================================================================

#pragma mark - OAD Method
#pragma mark Private
/* 获取OAD文件的类型 */
- (void)checkCurrentBinTypeCompletion:(GetOADBinTypeCompletion)completion {
    _getOADBinTypeCompletion = completion;
    _imgVer = 0xffff;
    unsigned char c = 0x00;
    
    // 关闭写入文件通知
    [_btService notification:[CBUUID UUIDWithString:TI_KEYFOB_KEYS_OAD_SERVICE_UUID] characteristicUUID:[CBUUID UUIDWithString:TI_KEYFOB_KEYS_OAD_CHARACTERISTIC_WRITE_B_UUID] peripheral:_actPeripheral on:NO];
    
    NSData *data = [[NSData alloc] initWithBytes:&c length:sizeof(c)];
    [self writeOADCMDDataToActivePeripheral:data];
    
    [NSTimer scheduledTimerWithTimeInterval:1.5 target:self selector:@selector(checkCurrentBinTypeB) userInfo:nil repeats:NO];
}

- (void)checkCurrentBinTypeB {
    unsigned char c = 0x01;
    NSData *data = [[NSData alloc] initWithBytes:&c length:sizeof(c)];
    [self writeOADCMDDataToActivePeripheral:data];
}

/* 对比文件类型 */
- (BOOL)compareBinFile:(NSData *)data toVersion:(UInt16)version {
    // 验证流文件版本和固件版本是一致匹配
    unsigned char imageFileData[data.length];
    [data getBytes:imageFileData];
    
    img_hdr_t imgHeader;
    memcpy(&imgHeader, &imageFileData[0 + OAD_IMG_HDR_OSET], sizeof(img_hdr_t));
    
    if ((imgHeader.ver & 0x01) == version) {
        return YES;
    } else {
        return NO;
    }
}

/* 写入文件 */
- (void)uploadImage:(NSData *)data {
    unsigned char imageFileData[data.length];
    [data getBytes:imageFileData];
    
    uint8_t requestData[OAD_IMG_HDR_SIZE + 2 + 2]; // 12byte

    img_hdr_t imgHeader;  // 2 ~ 16 byte
    memcpy(&imgHeader, &imageFileData[0 + OAD_IMG_HDR_OSET], sizeof(img_hdr_t));
    
    requestData[0] = LO_UINT16(imgHeader.ver); // 第 4 byte
    requestData[1] = HI_UINT16(imgHeader.ver); // 第 3 byte
    
    requestData[2] = LO_UINT16(imgHeader.len); // 第 6 byte
    requestData[3] = HI_UINT16(imgHeader.len); // 第 5 byte
    
    memcpy(requestData + 4, &imgHeader.uid, sizeof(imgHeader.uid)); // 7 ~ 11 字节 copy到 requestData 4 ~ 8字节
    
    requestData[OAD_IMG_HDR_SIZE + 0] = LO_UINT16(12);
    requestData[OAD_IMG_HDR_SIZE + 1] = HI_UINT16(12);
    
    requestData[OAD_IMG_HDR_SIZE + 2] = LO_UINT16(15);
    requestData[OAD_IMG_HDR_SIZE + 1] = HI_UINT16(15);  // requestData的后4个字节为   0x 00 11 11 00

    [self writeOADCMDDataToActivePeripheral:[NSData dataWithBytes:requestData length:OAD_IMG_HDR_SIZE + 2 + 2]];
    
    _nBlocks = imgHeader.len / (OAD_BLOCK_SIZE / HAL_FLASH_WORD_SIZE);
    _nBytes  = imgHeader.len * HAL_FLASH_WORD_SIZE;
    _iBlocks = 0;
    _iBytes  = 0;
    
    [NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(programmingTimerTick:) userInfo:data repeats:NO];
}

/* 循环写入 */
- (void)programmingTimerTick:(NSTimer *)timer {
    NSData *data = timer.userInfo;
    unsigned char imageFileData[data.length];
    [data getBytes:imageFileData];
    
    uint8_t requestData[2 + OAD_BLOCK_SIZE];  // 18 byte
    
    for (int index = 0; index < 4; index ++) {
        requestData[0] = LO_UINT16(_iBlocks);
        requestData[1] = HI_UINT16(_iBlocks);    // 前两个字节为 第几包 (eg:0100第一包)
        
        memcpy(&requestData[2] , &imageFileData[_iBytes], OAD_BLOCK_SIZE);
        [self writeOADFileDataToActivePeripheral:[NSData dataWithBytes:requestData length:2 + OAD_BLOCK_SIZE]];
        
        _iBlocks++;
        _iBytes += OAD_BLOCK_SIZE;
        
        _writeBinFilePackageCompletion((float)_iBlocks / (float)_nBlocks);
        
        if(_iBlocks == _nBlocks) {
            _writeBinFileCompletion(YES);
            _writeBinFileCompletion = nil;
            _writeBinFilePackageCompletion = nil;
            return;
        } else {
            if (index == 3)[NSTimer scheduledTimerWithTimeInterval:0.09 target:self selector:@selector(programmingTimerTick:) userInfo:data repeats:NO];
        }
    }
}

#pragma mark Public
- (void)writeBinFileToActPeriperal:(NSData *)data
                   writePercentage:(WriteBinFilePackageCompletion)writePackageCompletion
                        completion:(WriteBinFileCompletion)completion {
    if (_imgVer != 0xffff) {
        if ([self compareBinFile:data toVersion:_imgVer]) {
            completion(NO); // 如果当前固件版本和写入固件版本类型一致，则不能写入
        } else {
            _writeBinFilePackageCompletion = writePackageCompletion;
            _writeBinFileCompletion = completion;
            [self uploadImage:data];
        }
    } else {
        completion(NO);
    }
}

#pragma mark - Response

// 接受用户信息
- (void)parseBackUpLoadUserInfoData:(NSData *)data {
    Byte pkgnum, pkgid;
    [data getBytes:&pkgnum range:NSMakeRange(1, 1)];
    [data getBytes:&pkgid range:NSMakeRange(2, 1)];
    
    // 验证是否为重复数据 如果是重复数据则不处理（每个数据包会发三次）
    if ([_lastInfoPackage isEqualToData:data]) {
        [self getAllUserConfirm:pkgnum pkgid:pkgid];
        return;
    }
    
    if (pkgid == 1) {
        _userEntityList = [NSMutableArray array];
    }
    
    // ************** Parse Package **************
    Byte userId, userHeight, userAge, userGender;
    [data getBytes:&userId range:NSMakeRange(3, 1)];
    [data getBytes:&userHeight range:NSMakeRange(4, 1)];
    userHeight = [self transformToAppHeight:userHeight];
    [data getBytes:&userAge range:NSMakeRange(5, 1)];
    [data getBytes:&userGender range:NSMakeRange(6, 1)];
    
    ScaleUserEntity *userEntity = [[ScaleUserEntity alloc] init];
    userEntity.userId = userId;
    userEntity.userHeight = userHeight;
    userEntity.userAge = userAge;
    userEntity.userGender = userGender;
    [_userEntityList addObject:userEntity];
    // *******************************************
    
    [self getAllUserConfirm:pkgnum pkgid:pkgid];
    _lastInfoPackage = data;
    if (pkgid == pkgnum) { // 如果是最后一条
        if (_getAllUserInfoCompletion) {
            _getAllUserInfoCompletion(0, self.userEntityList, data); // 0 表示有用户参数
            _getAllUserInfoCompletion = nil;
        }
    }
}

// 接收测量数据
- (void)parseBackUpLoadUserData:(NSData *)data {
    NSLog(@"收到测量数据");
    ScaleUserDataEntity *userDataEntity = [self parseUserData:data];
    Byte pkgnum, pkgid;
    [data getBytes:&pkgnum range:NSMakeRange(1, 1)];
    [data getBytes:&pkgid range:NSMakeRange(2, 1)];
    if (userDataEntity) {
        if ([_tempUserData isEqualToData:data]) {
            [self getUserScaleConfirm:pkgnum pkgid:pkgid];
            return;
        }
        _tempUserData = data;
         
        if (pkgid == pkgnum) {
            [[NSNotificationCenter defaultCenter] postNotificationName:REALTIME_USERDATA_RESPONSE object:userDataEntity];
            _tempUserData = nil;
        }
    }
    [self getUserScaleConfirm:pkgnum pkgid:pkgid];
}

// 接收用户数据
- (void)parseBackUpReadUserData:(NSData *)data {
    Byte pkgnum, pkgid;
    [data getBytes:&pkgnum range:NSMakeRange(1, 1)];
    [data getBytes:&pkgid range:NSMakeRange(2, 1)];
    // 验证是否为重复数据 如果是重复数据则不处理（每个数据包会发三次）*******
    if ([_lastDataPackage isEqualToData:data]) {
        [self getReadScaleDataConfirm:pkgnum pkgid:pkgid];
        return;
    }
    _lastDataPackage = data;
    // ************************************************************
    
    // 解析、解码
    ScaleUserDataEntity *userDataEntity = [self parseUserData:data];
    if (!userDataEntity) {
        [self getReadScaleDataConfirm:pkgnum pkgid:pkgid];
        return;
    }
    
    if (userDataEntity.pkgid == 2) {
        _userDataEntityList = [NSMutableArray array];
    }
    
    [_userDataEntityList addObject:userDataEntity];
    
    if (pkgid == pkgnum) {
        if (_readScaleDataCompletion) {
            _readScaleDataCompletion(1, _userDataEntityList, nil); // 1 表示有用户数据
            _readScaleDataCompletion = nil;
        }
    }
    [self getReadScaleDataConfirm:pkgnum pkgid:pkgid];
}

// 接收实时重量
- (void)parseRealTimeWeightData:(NSData *)data {
    Byte lock;
    short weight;
    
    [data getBytes:&lock range:NSMakeRange(1, 1)];
    [data getBytes:&weight range:NSMakeRange(2, 2)];
    weight = CFSwapInt16(weight);
    
    ScaleRealTimeWeightEntity *realTimeEntity = [[ScaleRealTimeWeightEntity alloc] init];
    realTimeEntity.lock = lock;
    realTimeEntity.weight = weight / 10.0f;
    
    [[NSNotificationCenter defaultCenter] postNotificationName:REALTIME_WEIGHT_RESPONSE object:realTimeEntity];
}

// 接收返回 获取用户信息
- (void)parseBackGetSimUserData:(NSData *)data {
    Byte code;
    [data getBytes:&code range:NSMakeRange(2, 1)];
    if (code == 0) {
        Byte userHeight, userAge, userGender;
        [data getBytes:&userHeight range:NSMakeRange(3, 1)];
        userHeight = [self transformToAppHeight:userHeight];
        [data getBytes:&userAge range:NSMakeRange(4, 1)];
        [data getBytes:&userGender range:NSMakeRange(5, 1)];
        
        ScaleUserEntity *userEntity = [[ScaleUserEntity alloc] init];
        userEntity.userHeight = userHeight;
        userEntity.userAge = userAge;
        userEntity.userGender = userGender;
        if (_getUserInfoCompletion) {
            _getUserInfoCompletion(BT_SERVICE_SUCCESS_CODE, userEntity, data);
            _getUserInfoCompletion = nil;
        }
    }
}

// 接收返回命令
- (void)parseCommandBackData:(NSData *)data {
    Byte requestID;
    [data getBytes:&requestID range:NSMakeRange(1, 1)];
    
    switch (requestID) {
        case SCALE_COMMAND_GETSIMUSER:
            [self parseBackGetSimUserData:data];
            break;
        case SCALE_COMMAND_ASKTIME:
            if (_updateTimeCompletion) {
                _updateTimeCompletion(BT_SERVICE_SUCCESS_CODE, nil, nil);
                _updateTimeCompletion = nil;
            }
            break;
        case SCALE_COMMAND_NEWUSER: {
            Byte fbCode;
            [data getBytes:&fbCode range:NSMakeRange(2, 1)];
            if (fbCode == 4) {          // 写入Device Code协议
                if (_writeIdCompletion) {
                    _writeIdCompletion(BT_SERVICE_SUCCESS_CODE, nil, nil);
                    _writeIdCompletion = nil;
                }
            } else if (fbCode == 5) {   // 读出Device Code协议
                NSMutableString *deviceCode = [NSMutableString string];
                for (int index = 3; index < 6; index ++) {
                    Byte byte;
                    [data getBytes:&byte range:NSMakeRange(index, 1)];
                    [deviceCode appendString:[NSString stringWithFormat:@"%02X", byte]];
                }
                _deviceCode = deviceCode;
                
                if (_readIdCompletion) {
                    _readIdCompletion(BT_SERVICE_SUCCESS_CODE, deviceCode, nil);
                    _readIdCompletion = nil;
                }
                
            } else if (fbCode == 1 || fbCode == 2 || fbCode == 0) {                    // 1 2 3 和 0 是创建用户协议
                if (_newUserCompletion) {
                    _newUserCompletion(fbCode, nil, nil);
                    _newUserCompletion = nil;
                }
            }
        }
            break;
        case SCALE_COMMAND_DELETEUSER: {
            Byte fbCode;
            [data getBytes:&fbCode range:NSMakeRange(2, 1)];
            if (_deleteUserCompletion) {
                _deleteUserCompletion(fbCode, nil, nil);
                _deleteUserCompletion = nil;
            }
        }
            break;
        case SCALE_COMMAND_READSCALEDATA: {
            Byte fbCode;
            [data getBytes:&fbCode range:NSMakeRange(3, 1)];
            if (fbCode == 0) { // 0 没有数据
                _userDataEntityList = [NSMutableArray array];
                if (_readScaleDataCompletion) {
                    _readScaleDataCompletion(fbCode, _userDataEntityList, nil);
                    _readScaleDataCompletion = nil;
                }
            }
        }
            break;
        case SCALE_COMMAND_GETALLUSER: {
            Byte fbCode;
            [data getBytes:&fbCode range:NSMakeRange(2, 1)];
            if (fbCode == 1) { // 1 没有用户
                _userEntityList = [NSMutableArray array];
                if (_getAllUserInfoCompletion) {
                    _getAllUserInfoCompletion(fbCode, _userEntityList, nil);
                    _getAllUserInfoCompletion = nil;
                }
            }
        }
            break;
        case SCALE_COMMAND_DELETESCALEDATA: {
            Byte fbCode;
            [data getBytes:&fbCode range:NSMakeRange(2, 1)];
            if (_deleteScaleDataCompletion) {
                _deleteScaleDataCompletion(fbCode, nil, nil);
                _deleteScaleDataCompletion = nil;
            }
        }
            break;
        case SCALE_COMMAND_EXISTUSER: {
            Byte fbCode;
            [data getBytes:&fbCode range:NSMakeRange(2, 1)];
            if (_existUserCompletion) {
                _existUserCompletion(fbCode, nil, nil);
                _existUserCompletion = nil;
            }
        }
            break;
        case SCALE_COMMAND_UPDATEUSER: {
            Byte fbCode;
            [data getBytes:&fbCode range:NSMakeRange(2, 1)];
            if (_updateUserCompletion) {
                _updateUserCompletion(fbCode, nil, nil);
                _updateUserCompletion = nil;
            }
        }
            break;
        case SCALE_COMMAND_USERSCALE: {
            Byte fbCode;
            [data getBytes:&fbCode range:NSMakeRange(2, 1)];
            if (_selectScaleCompletion) {
                _selectScaleCompletion(fbCode, nil, nil);
                _selectScaleCompletion = nil;
            }
        }
            break;
        case SCALE_COMMAND_READMACADDRESS: {
            NSMutableString *macAddress = [NSMutableString string];
            for (int index = 5; index >= 0; index --) {
                Byte byte;
                [data getBytes:&byte range:NSMakeRange(index + 2, 1)];
                if (index == 0) {
                    [macAddress appendFormat:@"%02x", byte];
                } else {
                    [macAddress appendFormat:@"%02x:", byte];
                }
            }
            if (_getMACAddressCompletion) {
                _getMACAddressCompletion(BT_SERVICE_SUCCESS_CODE, macAddress, data);
                _getMACAddressCompletion = nil;
            }
        }
            break;
        case SCALE_COMMAND_RESETWEIGHT: {
            Byte fbCode;
            [data getBytes:&fbCode range:NSMakeRange(2, 1)];
            if (_resetWeightCompletion) {
                _resetWeightCompletion(fbCode, nil, data);
                _resetWeightCompletion = nil;
            }
        }
            break;
        case SCALE_COMMAND_RESETSCALE: {
            Byte fbCode;
            [data getBytes:&fbCode range:NSMakeRange(2, 1)];
            if (_resetScaleCompletion) {
                _resetScaleCompletion(fbCode, nil, data);
                _resetScaleCompletion = nil;
            }
        }
            break;
        default:
            if (data.length > 2) {
                Byte success;
                [data getBytes:&success range:NSMakeRange(2, 1)];
                NSLog(@"蓝牙设备其他返回%@", data);
            }
            break;
    }
}

// OAD拆包
- (void)parseOADPackageData:(NSData *)data UUID:(CBUUID *)UUID {
    NSLog(@"oad data %@", data);
    
    if ([BTUtils compareCBUUID:UUID UUID2:[CBUUID UUIDWithString:TI_KEYFOB_KEYS_OAD_CHARACTERISTIC_WRITE_A_UUID]]) {
        unsigned char sdata[data.length];
        [data getBytes:&sdata];
        
        // 00 00 00 7c 41 41 41 41
        if (_getOADBinTypeCompletion) {
            _imgVer = ((uint16_t)sdata[1] << 8 & 0xff00) | ((uint16_t)sdata[0] & 0xff);
            _getOADBinTypeCompletion(((uint16_t)sdata[1] << 8 & 0xff00) | ((uint16_t)sdata[0] & 0xff));
            _getOADBinTypeCompletion = nil;
        }
    }
}

// 拆包
- (void)parsePackageData:(NSData *)data {
    Byte bcmd;
    [data getBytes:&bcmd length:1];
    
//    NSLog(@"cmd data %@", data);
    switch (bcmd) {
        case SCALE_COMMAND_ASKTIME: {
            [self updateTimeCompletion:^(int code, id info, id originalData) {
                if (data.length > 1) {
                    Byte version;
                    [data getBytes:&version range:NSMakeRange(1, 1)];
                    _version = version;
                    NSLog(@"更新时间成功, 当前版本%02x", version);
                } else {
                    _version = ERROR_VERSION;
                    NSLog(@"更新时间成功, 当前版本N/A");
                }
                [[NSNotificationCenter defaultCenter] postNotificationName:BT_SERVICE_UPDATETIME_NOTIFICATION object:nil];
            }];
        }
            break;
        case SCALE_COMMAND_BACK_UPLOADUSERINFO:
            [self parseBackUpLoadUserInfoData:data];
            break;
        case SCALE_COMMAND_BACK_UPLOADUSERDATA:
            [self parseBackUpLoadUserData:data];
            break;
        case SCALE_COMMAND_BACK_READUSERDATA:
            [self parseBackUpReadUserData:data];
            break;
        case SCALE_COMMAND_REALTIMEWEIGHT:
            [self parseRealTimeWeightData:data];
            break;
        case SCALE_COMMAND_BACK:
            [self parseCommandBackData:data];
            break;
        default:
            break;
    }
}

- (ScaleUserDataEntity *)parseUserData:(NSData *)data {
    ScaleUserDataEntity *userDataEntity = [[ScaleUserDataEntity alloc] init];
    Byte pkgid, userId;
    [data getBytes:&pkgid range:NSMakeRange(2, 1)];
    [data getBytes:&userId range:NSMakeRange(3, 1)];
    userDataEntity.userId = userId;
    
    if (pkgid % 2 == 1){
        int tmie;
        short weight, bf, water;
        [data getBytes:&tmie range:NSMakeRange(4, 4)];
        
        // 解析时间 此处不需要转换为小端
        NSDate *orgDate;
        NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
        [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
        orgDate = [dateFormat dateFromString:@"2000-01-01 00:00:00"];
        NSDate *date = [[NSDate alloc] initWithTimeInterval:tmie sinceDate:orgDate];
        
        [data getBytes:&weight range:NSMakeRange(8, 2)];
        weight = CFSwapInt16(weight);
        [data getBytes:&bf range:NSMakeRange(10, 2)];
        bf = CFSwapInt16(bf);
        [data getBytes:&water range:NSMakeRange(12, 2)];
        water = CFSwapInt16(water);
        
        userDataEntity.tmie = date;
        userDataEntity.weight = weight / 10.0f;
        userDataEntity.bf = bf / 10.0f;
        userDataEntity.water = water / 10.0f;
        
        _userDataEntityPackage = userDataEntity;
        return nil;
    } else {
        userDataEntity = _userDataEntityPackage;
        
        Byte pkgnum;
        [data getBytes:&pkgnum range:NSMakeRange(1, 1)];
        userDataEntity.pkgnum = pkgnum;
        userDataEntity.pkgid = pkgid;
        
        short muscle, bone, bmr, sfat;
        Byte infat, bodyage;
        [data getBytes:&muscle range:NSMakeRange(4, 2)];
        muscle = CFSwapInt16(muscle);
        [data getBytes:&bone range:NSMakeRange(6, 2)];
        bone = CFSwapInt16(bone);
        [data getBytes:&bmr range:NSMakeRange(8, 2)];
        bmr = CFSwapInt16(bmr);
        [data getBytes:&sfat range:NSMakeRange(10, 2)];
        sfat = CFSwapInt16(sfat);
        [data getBytes:&infat range:NSMakeRange(12, 1)];
        [data getBytes:&bodyage range:NSMakeRange(13, 1)];
        
        userDataEntity.muscle = muscle / 10.0f;
        userDataEntity.bone = bone / 10.0f;
        userDataEntity.bmr = bmr;
        userDataEntity.sfat = sfat / 10.0f;
        userDataEntity.infat = infat;
        userDataEntity.bodyage = bodyage;
        
        return userDataEntity;
    }
}

/* 普通协议写入命令 */
- (void)writeDataToActivePeripheral:(NSData *)data {
    CBUUID *serviceUUID =           [BTUtils StringToUUID:TI_KEYFOB_KEYS_SERVICE_UUID];
    CBUUID *characteristicUUID =    [BTUtils StringToUUID:TI_KEYFOB_KEYS_WRITE_UUID];
    [_btService writeValueWithServiceUUID:serviceUUID characteristicUUID:characteristicUUID peripheral:_actPeripheral data:data];
}

/* OAD协议写入命令 */
- (void)writeOADCMDDataToActivePeripheral:(NSData *)data {
    CBUUID *serviceUUID =           [BTUtils StringToUUID:TI_KEYFOB_KEYS_OAD_SERVICE_UUID];
    CBUUID *characteristicUUID =    [BTUtils StringToUUID:TI_KEYFOB_KEYS_OAD_CHARACTERISTIC_WRITE_A_UUID];
    [_btService writeValueWithServiceUUID:serviceUUID characteristicUUID:characteristicUUID peripheral:_actPeripheral data:data];
}

/* OAD协议写入文件 */
- (void)writeOADFileDataToActivePeripheral:(NSData *)data {
    CBUUID *serviceUUID =           [BTUtils StringToUUID:TI_KEYFOB_KEYS_OAD_SERVICE_UUID];
    CBUUID *characteristicUUID =    [BTUtils StringToUUID:TI_KEYFOB_KEYS_OAD_CHARACTERISTIC_WRITE_B_UUID];
//    [_btService writeValueWithServiceUUID:serviceUUID characteristicUUID:characteristicUUID peripheral:_actPeripheral data:data];
    [_btService writeValueWithServiceUUID:serviceUUID characteristicUUID:characteristicUUID peripheral:_actPeripheral data:data type:CBCharacteristicWriteWithoutResponse];
}

#pragma mark - Bluetooth Service Delegate
- (void)peripheralFound:(CBPeripheral *)peripheral RSSI:(NSNumber *)RSSI{
    if ([peripheral.name isEqualToString:@"RyFit"] || [peripheral.name isEqualToString:@"ChronoCloud"]) {
        if (_findPeripheralCompletion) {
            _findPeripheralCompletion(peripheral, RSSI);
        }
    }
}

- (void)peripheral:(CBPeripheral *)peripheral didUpdateValueForCharacteristic:(CBCharacteristic *)characteristic {
    NSString *characteristicUUIDString = [[BTUtils CBUUIDToString:characteristic.UUID] lowercaseString];
    if ([characteristicUUIDString isEqualToString:TI_KEYFOB_KEYS_NOTIFICATION_UUID]) {
        [self parsePackageData:characteristic.value];
    } else if ([BTUtils compareCBUUID:characteristic.UUID UUID2:[CBUUID UUIDWithString:TI_KEYFOB_KEYS_OAD_CHARACTERISTIC_WRITE_A_UUID]] ||
               [BTUtils compareCBUUID:characteristic.UUID UUID2:[CBUUID UUIDWithString:TI_KEYFOB_KEYS_OAD_CHARACTERISTIC_WRITE_B_UUID]]) {
        [self parseOADPackageData:characteristic.value UUID:characteristic.UUID];
    }
}

- (void)connectedPeripheral:(CBPeripheral *)peripheral {
    _findPeripheralCompletion = nil;
}

- (void)unconnectPeripheral:(CBPeripheral *)peripheral error:(NSError *)error {
    NSLog(@"蓝牙断开连接");
    _actPeripheral = nil;
}

#pragma mark - Convert
- (int)transformToAppHeight:(int)n {
    return (n * 5 + 1000) / 10;
}

#pragma mark - Utils
- (NSData*)stringToByte:(NSString*)string {
    NSString *hexString=[[string uppercaseString] stringByReplacingOccurrencesOfString:@" " withString:@""];
    if ([hexString length]%2!=0) {
        return nil;
    }
    Byte tempbyt[1]={0};
    NSMutableData* bytes=[NSMutableData data];
    for(int i=0;i<[hexString length];i++)
    {
        unichar hex_char1 = [hexString characterAtIndex:i]; // 两位16进制数中的第一位(高位*16)
        int int_ch1;
        if(hex_char1 >= '0' && hex_char1 <='9')
            int_ch1 = (hex_char1-48)*16;                    // 0 的Ascll - 48
        else if(hex_char1 >= 'A' && hex_char1 <='F')
            int_ch1 = (hex_char1-55)*16;                    // A 的Ascll - 65
        else
            return nil;
        i++;
        
        unichar hex_char2 = [hexString characterAtIndex:i]; // 两位16进制数中的第二位(低位)
        int int_ch2;
        if(hex_char2 >= '0' && hex_char2 <='9')
            int_ch2 = (hex_char2-48);                       // 0 的Ascll - 48
        else if(hex_char2 >= 'A' && hex_char2 <='F')
            int_ch2 = hex_char2-55;                         // A 的Ascll - 65
        else
            return nil;
        
        tempbyt[0] = int_ch1+int_ch2;                       // 将转化后的数放入Byte数组里
        [bytes appendBytes:tempbyt length:1];
    }
    return bytes;
}

@end
